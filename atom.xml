<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵龙的个人博客</title>
  
  <subtitle>Learn something of everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhaolong.online/"/>
  <updated>2019-03-30T16:41:54.678Z</updated>
  <id>zhaolong.online/</id>
  
  <author>
    <name>ZHAO LONG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原型和原型链</title>
    <link href="zhaolong.online/2019/03/31/JS%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
    <id>zhaolong.online/2019/03/31/JS面试题2/</id>
    <published>2019-03-30T16:09:00.000Z</published>
    <updated>2019-03-30T16:41:54.678Z</updated>
    
    <content type="html"><![CDATA[<p>1.如何准确判断一个变量是否为数组类型?</p><p>  答案：</p><pre><code>var arr=[] ;console.log(arr instanceof Array); //true</code></pre><p>2.写一个原型链继承的例子?</p><p>  答案：封装DOM查询：</p><pre><code>//定义构造函数Elem，属性封装成idfunction Elem(id){  this.elem = document.getElementById(id)}Elem.prototype.html = function(val){  if(val){//如果传了val参数的话执行：    elem.innerHTML = val;    return this //以便实现后来的链式操作  }else{    return elem.innerHTML //如果没有传，就返回这个elem原来的innerHTML属性值。  }}Elem.prototype.on = function(type,fn){  var elem = this.elem;  //监听事件，type为事件类型，fn为回调函数  elem.addEventListener(type,fn){  return this  }}var div1 = new Elem(&apos;div1&apos;);div1.html(&apos;&lt;p&gt;hello&lt;/p&gt;&apos;).on(&apos;click&apos;,function(){alert(&apos;clicked&apos;)}).html(&apos;&lt;p&gt;javascript&lt;/p&gt;&apos;)</code></pre><p>3.描述new一个对象的过程：</p><p>  答案：创建一个新对象，this指向这个新对象，执行代码对this赋值，返回this；</p><pre><code>function Foo(name,age){      this.name = name;      this.age = age;      this.class = ‘class-1’      return this //这行不用写，默认就有；  }  var f = new Foo(‘zhangsan’,22);</code></pre><p>4.zepto(或其他框架)源码中如何使用原型链？</p><p>  答案： (还没看，只能先补充一些基础的知识点)</p><pre><code>1.所有的引用类型（数组，对象，函数）都具有对象特性，即可自由扩展属性（除了null）；      2.所有的引用类型都有一个__proto__属性（隐式原型属性），属性值是一个普通的对象；3.所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象；4.所有的引用类型，__proto__ 属性值（隐式原型属性指向构造它的构造函数的prototype属性值），当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么就会去它的__proto__（即它的构造函数的prototype（显式原型）中寻找.5.通过对象的属性的形式来执行函数的时候，无论这函数式自身的属性还是从原型中得到的属性，this永远指向f本身，没有指向函数，故执行f.alertName()时，alert(this.name)中的this就是f。      6.循环对象自身的属性时，可以通过hasOwnProperty 来验证遍历中的item是否为f自身的属性，例如下：            var item            for(item in f){                if (f.hasOwnProperty(item)){ console.log(item)}        //高级浏览器已经在for in中屏蔽了来自原型的属性，但我们还是建议加上这个判断，来保证程序的健壮性。        }</code></pre><ol start="5"><li><p>instanceof 用来判断引用类型属于哪个构造函数的方法？</p><p>答案：给出例子：</p><p>   var f = new Foo(‘zhangsan’)</p><p>   此时，f instanceof Foo 的判断逻辑就是；f 是Foo new出来的一个类型，判断方式其实是：f的隐式原型（.<strong>proto</strong>）一层一层往上，看能否对应到Foo.prototype(显式原型)</p><p>   注意：Object.prototype的隐式原型是null（JS为了避免死循环）</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.如何准确判断一个变量是否为数组类型?&lt;/p&gt;
&lt;p&gt;  答案：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr=[] ;
console.log(arr instanceof Array); //true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.写一个原型链继承的例子?&lt;/p
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>变量类型和计算</title>
    <link href="zhaolong.online/2019/03/30/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>zhaolong.online/2019/03/30/JS面试题/</id>
    <published>2019-03-30T15:43:08.000Z</published>
    <updated>2019-03-30T16:04:26.678Z</updated>
    
    <content type="html"><![CDATA[<p>考点一:变量类型和计算</p><p>1.JS使用typeof能得到哪些类型？</p><p>  答案：undefined, string, number, boolean, object, function(null返回的是 object)，symbol(ES6)</p><p>2.何时使用===何时使用==:</p><p>  答案：建议都使用 ===，考虑到以下因素：1.一致性；2.简单和性能：===是最简单的操作符，因为它不用进行类型转换，而==会进行强制类型转换。而可以使用 == 的两种场景：</p><pre><code>  1.判断对象的属性是否存在:        var object = {}            if(obj.a == null){            //这里相当于 obj.a == null || obj.a == undefined 的简写形式        }      2.判断函数的参数是否存在：        function fn(a, b){        if (b==null){              //这里相当于b == null || b == undefined 的简写形式        }    }扩展知识：      1.if语句会执行强制类型转换;      2.if()返回false的情况：0, null, undefined,NaN,空字符串，false；其他均返回true,空对象和空数组，也是返回true的;      3.你知道console.log(1===1===1)的值是什么吗？ false. 理由：1===1 为true， 而true===1不成立，所以返回为false.</code></pre><p>3.JS中有哪些内置函数?</p><p>  答案：Number, String,Object，Boolean，Function，Array，Date，RegExp，Error，Symbol（ES6) 【注：Symbol函数前不能使用new命令，否则会报错，Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述】;</p><p>4.JS变量按照存储方式区分为哪些类型，并描述其特点？</p><p>  答案：1.️值类型，值类型存储的是值；<br>       2.️引用类型 ，存储的是地址，赋值之后是把原变量的引用地址赋值给新变量。</p><p>5.如何理解JSON？</p><p>  答案：JSON就是一个js对象，有两个方法:<br>       1.JSON.stringify({‘a’:10,’b’:20})<br>    ️   2.JSON.parse（’{‘a’:10,’b’:20}’),JSON.parse 不兼容，可以使用eval来转化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;考点一:变量类型和计算&lt;/p&gt;
&lt;p&gt;1.JS使用typeof能得到哪些类型？&lt;/p&gt;
&lt;p&gt;  答案：undefined, string, number, boolean, object, function(null返回的是 object)，symbol(ES6)&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="zhaolong.online/2019/03/30/hello-world/"/>
    <id>zhaolong.online/2019/03/30/hello-world/</id>
    <published>2019-03-30T10:22:29.898Z</published>
    <updated>2019-03-30T10:22:29.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
