<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵龙的个人博客</title>
  
  <subtitle>Learn something of everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhaolong.online/"/>
  <updated>2019-04-16T13:22:13.303Z</updated>
  <id>zhaolong.online/</id>
  
  <author>
    <name>ZHAO LONG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS版算法与数据结构</title>
    <link href="zhaolong.online/2019/04/15/JS%E7%89%88%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>zhaolong.online/2019/04/15/JS版算法与数据结构/</id>
    <published>2019-04-15T14:30:28.000Z</published>
    <updated>2019-04-16T13:22:13.303Z</updated>
    
    <content type="html"><![CDATA[<p>From Leetcode</p><h4 id="557-Reverse-Words-in-a-String-III"><a href="#557-Reverse-Words-in-a-String-III" class="headerlink" title="557. Reverse Words in a String III"></a>557. Reverse Words in a String III</h4><p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p><p>Example 1:<br>Input: “Let’s take LeetCode contest”<br>Output: “s’teL ekat edoCteeL tsetnoc”</p><p><strong>Note: In the string, each word is separated by single space and there will not be any extra space in the string.</strong></p><p>解题思路1：Note里给了非常重要的提示，那就是每个单词都是用单个空格隔开的，那么就可以调用字符串的split方法，将单词分开后单独进行反转然后再拼接起来。最后我将使用ES6的箭头函数来让代码显得更简洁：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = s.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> result = arr.map(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">' '</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上述代码可以简化为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">' '</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.split(<span class="string">''</span>).reverse().join()</span><br><span class="line">    &#125;).join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解题思路2: 与1类似，只不过是该用正则表达式和调用match方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.match(<span class="regexp">/[\w']+/g</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;).join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="696-Count-Binary-Substrings"><a href="#696-Count-Binary-Substrings" class="headerlink" title="696. Count Binary Substrings"></a>696. Count Binary Substrings</h4><p>Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0’s and 1’s, and all the 0’s and all the 1’s in these substrings are grouped consecutively.</p><p>Substrings that occur multiple times are counted the number of times they occur.</p><p>Example 1:<br>Input: “00110011”<br>Output: 6<br>Explanation: There are 6 substrings that have equal number of consecutive 1’s and 0’s: “0011”, “01”, “1100”, “10”, “0011”, and “01”.</p><p><strong>Notice that some of these substrings repeat and are counted the number of times they occur.</strong></p><p>Also, “00110011” is not a valid substring because all the 0’s (and 1’s) are not grouped together.<br>Example 2:<br>Input: “10101”<br>Output: 4<br>Explanation: There are 4 substrings: “10”, “01”, “10”, “01” that have equal number of consecutive 1’s and 0’s.<br>Note:</p><p>s.length will be between 1 and 50,000.<br>s will only consist of “0” or “1” characters.</p><p>解题思路：逆向思考，从例子得到的结果找到规律</p><p>输入： ‘00110011’</p><p>输出：(加粗部分为输出的数字)<br>         <strong>0011</strong>0011<br>          0<strong>01</strong>10011<br>          00<strong>1100</strong>11<br>          001<strong>10</strong>011<br>          0011<strong>0011</strong></p><p>规律： 从第一个数字寻找符合条件的字符串，找到以后加入数组中，同时移到下一位数字去；若没找到，也直接移到下一位数字去。（注意：要求是连续的0和1，所以：以某一位0或1开始至多能找到1个符合条件的字符串）</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [];<span class="comment">//创建一个数组用于保存数据</span></span><br><span class="line"><span class="keyword">let</span> match = <span class="function">(<span class="params">s</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> j = s.match(<span class="regexp">/^0+|1+/</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> o = (j[<span class="number">0</span>] ^ <span class="number">1</span>).toString().repeat(j.length)<span class="comment">//取反,且o和j的长度一致；</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^($&#123;j&#125;$&#123;o&#125;)'</span>)</span><br><span class="line">    <span class="keyword">if</span> (reg.test(s))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里需要注意的是：若s长度为八位，则i&lt;7即可，因为至少需要length为2才有可能组成一个符合条件的字符串.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过for循环控制程序运行的流程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>,len=s.length<span class="number">-1</span>;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> sub = match(s.slice(i))</span><br><span class="line">    <span class="keyword">if</span>(sub)&#123;</span><br><span class="line">        result.push(sub)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;From Leetcode&lt;/p&gt;
&lt;h4 id=&quot;557-Reverse-Words-in-a-String-III&quot;&gt;&lt;a href=&quot;#557-Reverse-Words-in-a-String-III&quot; class=&quot;headerlink&quot; title=&quot;557. 
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="zhaolong.online/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>DOM及事件的基础笔记</title>
    <link href="zhaolong.online/2019/04/12/DOM%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>zhaolong.online/2019/04/12/DOM基础笔记/</id>
    <published>2019-04-12T13:49:54.000Z</published>
    <updated>2019-04-13T05:52:22.661Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1. DOM"></a>1. DOM</h4><h5 id="1-DOM树："><a href="#1-DOM树：" class="headerlink" title="1. DOM树："></a>1. DOM树：</h5><p>  <img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="DOM树"></p><p>  DOM中的所有节点都可以通过js进行访问、修改、删除操作，js也能帮助我们创建新的节点。</p><h5 id="2-具体API"><a href="#2-具体API" class="headerlink" title="2. 具体API:"></a>2. 具体API:</h5><pre><code>1. 获取节点：    var x = document.getElementById(&apos;&apos;);    var y = document.getElementsByClassName(&apos;&apos;);//返回的是一个数组    var z = document.querySelector(&apos;&apos;);    (...)2. 操作节点：  1. 插入：    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入后成为最后一个子节点</span></span><br><span class="line">returnedNode = someNode.insertBefore(newNode,<span class="literal">null</span>);</span><br><span class="line">alert(newNode == someNode.lastChild);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//插入后成为第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> returnedNode = someNode.insertBefore(newNode,someNode.firstChild);</span><br><span class="line">alert（returnedNode == newNode);<span class="comment">//true</span></span><br><span class="line">alert(newCode == someNode.firstChild);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>  2. 替换    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> returnedNode = someNode.replaceChild(newNode, someNode.firstChild);</span><br><span class="line"><span class="comment">//替换最后一个子节点</span></span><br><span class="line">returnedNode = someNode.replaceChild(newNode, someNode.lastChild)</span><br></pre></td></tr></table></figure>  3. 克隆    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepList = myList.cloneNode(<span class="literal">true</span>);<span class="comment">//深拷贝，克隆节点的所有内容（标签—+标签里的内容）</span></span><br><span class="line"><span class="keyword">var</span> shallowList = myList.cloneNode(<span class="literal">false</span>);<span class="comment">//浅拷贝，仅克隆节点的标签。</span></span><br></pre></td></tr></table></figure>  4. 新增子节点(尽量减少对dom操作)    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//不推荐：</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">   <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">   li.innerHTML = <span class="string">'List item'</span> + x;</span><br><span class="line">   listNode.appendChild(li);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//推荐一：</span></span><br><span class="line"> <span class="keyword">var</span> html = <span class="string">''</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">   html += <span class="string">'&lt;li&gt; List item'</span>+ x + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> listNode.innerHTML = html;<span class="comment">//or: listNode.innerHTML += html</span></span><br><span class="line"> <span class="comment">//推荐二：</span></span><br><span class="line"> <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">   <span class="keyword">var</span> liNode = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">   liNode.innerHTML= <span class="string">'List item'</span>+x;</span><br><span class="line">   frag.appendChild(liNode);</span><br><span class="line"> &#125;</span><br><span class="line"> listNode.appendChild(frag);</span><br><span class="line"> <span class="comment">//1. DocumentFragment（为方便后面提及，简称DF） 节点不属于dom树，继承的parentNode属性总是null;2. 当请求把一个DF节点插入文档树，其实插入的只是它所有的子孙节点，DF只是充当一个占位符用来存放那些一次插入文档的节点;3.而且由于DF不属于文档书，因此把创建的节点添加到该对象时，并不会导致页面的回流，因此性能就自然上去了;4. DF操作可以保留。</span></span><br></pre></td></tr></table></figure></code></pre><h5 id="3-Document节点属性的简单应用"><a href="#3-Document节点属性的简单应用" class="headerlink" title="3.  Document节点属性的简单应用"></a>3.  Document节点属性的简单应用</h5><ol><li>document.title：title元素显示在浏览器的标题栏或标签页，此属性可读可写；</li><li><p>docuemnt.URL保存着当前页面完整的URL；document.domain只包含页面的域名(可以用来处理跨域问题)；document.referrer简单来说就是上一个页面的URL。在H5页面中，我们经常会在头部添加一个返回上一个页面的按钮，这个按钮功能可以通过简单的js代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> back-btn = docuemnt.getElementById(<span class="string">'back-btn'</span>)；</span><br><span class="line">back-btn.onclick =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  history.back();<span class="comment">//返回到上一个页面，也可以写成history.go(-1);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">&lt;a href=<span class="string">"javascript:history.back();"</span> id=<span class="string">'back'</span> rel=<span class="string">"external nofollow"</span> &gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>但如果该页面是别人分享过来的而不是通过其他页面进入的呢？那么点击该按钮将不会有任何反应，因为此时history对象中不存在历史记录，也就是说这是你浏览器窗口打开时浏览的第一个页面。为了优化用户体验，这里通常有两种解决方案。一种是在打开第一个页面时不显示返回上一页按钮，另一种是点击直接跳转到网站首页，这可以根据产品需求来选择合适的方案。<br>第一种方案的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.referrer)&#123;</span><br><span class="line">  back-btn.style.display = <span class="string">'block'</span>;<span class="comment">//默认隐藏，只有referrer不为空时显示；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方案的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.referrer === <span class="string">''</span>)&#123;</span><br><span class="line">  $(<span class="string">'#back'</span>).attr(<span class="string">'href'</span>,<span class="string">'/'</span>)<span class="comment">//沿用上文中id为back的a标签</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，具体哪些情景会导致获取document.referrer失败呢？</p><ol><li>直接在浏览器中输入一个新地址；</li><li>使用location.reload()刷新页面（location.href或者location.replace()刷新可以获得referrer信息）；</li><li>在微信对话框中，点击链接进入微信自身的浏览器；</li><li>扫码进入QQ或者微信的浏览器；</li><li>从https的网站进入http协议的网站；</li><li>a标签设置了rel= “noreferrer”;</li><li>meta标签控制不让发送referrer：<meta content="never" name="referrer"></li></ol></li></ol><h3 id="2-事件"><a href="#2-事件" class="headerlink" title="2.  事件"></a>2.  事件</h3><h4 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1. 作用域"></a>1. 作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">"hello"</span> onclick=<span class="string">"alert(this.title)"</span>&gt;Show Title HTML &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title="hello" onclick="showTitle()"&gt;Show Title HTML Handler &lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">"hello"</span> id=<span class="string">"titleDiv1"</span>&gt;Show Title DOM0&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title="hello" id="titleDiv2"&gt;Show Title DOM2&lt;/</span>div&gt;</span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTitle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.title)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> targetDiv1 = docuemnt.getElementById(<span class="string">'titleDiv1'</span>);</span><br><span class="line">targetDiv1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.title);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello</span></span><br><span class="line"><span class="keyword">var</span> targetDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">'titleDiv2'</span>);</span><br><span class="line">targetDiv2.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.title);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h4 id="2-事件处理-跨浏览器"><a href="#2-事件处理-跨浏览器" class="headerlink" title="2. 事件处理-跨浏览器"></a>2. 事件处理-跨浏览器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil =&#123;</span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener)&#123;</span><br><span class="line">        element.addEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">        element.attachEvent(<span class="string">'on'</span>+type,hanlder);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element[<span class="string">'on'</span>+type] = handler;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: fucntion(element,type,handeler)&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener)&#123;</span><br><span class="line">        element.removeEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">        element.detachEvent(<span class="string">'on'</span>+type,hanlder);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element[<span class="string">'on'</span>+type] = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-事件对象-target"><a href="#3-事件对象-target" class="headerlink" title="3. 事件对象-target"></a>3. 事件对象-target</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//currentTarget和target的区别： e.target指向触发事件的对象，而e.currentTarget指向添加该事件的对象</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span>  id=<span class="string">"myBtn"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var btn = document.getElementById('myBtn');</span></span><br><span class="line"><span class="regexp">btn.onclick = function(e)&#123;</span></span><br><span class="line"><span class="regexp">  alert(e.currentTarget === this)/</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp">  alert(e.target === this) /</span><span class="regexp">/ true</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">----------------------------------------------------------</span></span><br><span class="line"><span class="regexp">document.body.onclick = function(e)&#123;/</span><span class="regexp">/此时仍是点击id为'myBtn'的按钮</span></span><br><span class="line"><span class="regexp">  alert(e.currentTarget === document.body); /</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp">  alert(this === document.body);/</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp">  alert(e.target === document.getElementById('myBtn'));/</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-事件代理-统一处理"><a href="#4-事件代理-统一处理" class="headerlink" title="4. 事件代理-统一处理"></a>4. 事件代理-统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'myLinks'</span>);</span><br><span class="line">EventUtil.addHandler(list,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  event = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);<span class="comment">//如上，target指向的是触发该事件的对象</span></span><br><span class="line">  <span class="keyword">switch</span>(target.id)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'doSomething'</span>:</span><br><span class="line">      <span class="built_in">document</span>.title = <span class="string">"I changed the document's title"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'goSomewhere'</span>:</span><br><span class="line">      location.href = <span class="string">'http://www.dage.com'</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'sayHi'</span>:</span><br><span class="line">      alert(<span class="string">'hi'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-通过data-src加载图片"><a href="#5-通过data-src加载图片" class="headerlink" title="5. 通过data-src加载图片"></a>5. 通过data-src加载图片</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setImg</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementById(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(aLi[index].childNodes.length ==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(aLi[index].dataset)&#123;</span><br><span class="line">      <span class="keyword">var</span> src = aLi[index].dataset.src;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> src = aLi[index].getAttribute(<span class="string">'data-src'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> oImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    oImg.src = src;</span><br><span class="line">    aLi[index].appendChild(oImg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-DOM&quot;&gt;&lt;a href=&quot;#1-DOM&quot; class=&quot;headerlink&quot; title=&quot;1. DOM&quot;&gt;&lt;/a&gt;1. DOM&lt;/h4&gt;&lt;h5 id=&quot;1-DOM树：&quot;&gt;&lt;a href=&quot;#1-DOM树：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Javascript" scheme="zhaolong.online/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>产品设计之可用性评估</title>
    <link href="zhaolong.online/2019/04/12/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%8F%AF%E7%94%A8%E6%80%A7%E8%AF%84%E4%BC%B0/"/>
    <id>zhaolong.online/2019/04/12/产品设计之可用性评估/</id>
    <published>2019-04-12T13:09:56.000Z</published>
    <updated>2019-04-12T13:48:10.550Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看一些产品设计的课程，其中提到了尼尔森经典十大原则来进行可用性评估。</p><h4 id="十大基本原则"><a href="#十大基本原则" class="headerlink" title="十大基本原则"></a>十大基本原则</h4><ol><li>系统状态可见（Visibility of system status）： 也就是说要提供清晰显眼的提示（文字、震动、动态效果等），让用户知道自己操作的具体内容、执行操作的进度等；</li><li>系统和真实世界的匹配性（Match between system and the real world）：系统的相关设计应该与用户在真实世界中的习惯关联起来，比如购物车、回收站等；</li><li>用户的控制性和自由度（User control and freedom）: 让用户拥有自由进入和退出的权利，比如：网站页面左上角要提供返回按钮，广告窗口要提供关闭按钮等。（顺便问一问，那些广告窗口关闭按钮非常不明显的页面转化率还好吗？）</li><li>一致性和标准（Consistency and standards）：对于网页或APP的页面设计尤为重要，主要是要求产品内部统一化、不同版本之间保持延续性、产品设计对标行业惯例。</li><li>预防错误（Error prevention）：为用户的危险操作提供二次确认、撤销操作；</li><li>识别好过回忆（Recognition rather than recall）: 多选择、少输入；多通用语言、少概念性内容；</li><li>使用的灵活高效（Flexibility and efficiency of use）: 提供系统默认值、提供快捷操作；</li><li>美观简约（Aesthetic and minimalist design）：这条要点参考Apple产品及网页；</li><li>容错原则（Help users recognize, diagnose, and recover from errors）：帮助用户认识、判断和修复错误；</li><li>使用帮助（Help and documentation）：系统配置帮助文档及使用文档。从现在来看，用户用来越没有耐心去学习复杂的操作或者翻阅使用文档等（高度专业化的产品除外），所以产品设计的初期就应该考虑到：傻瓜式操作的比重越大，对于用户的吸引力也就越大。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看一些产品设计的课程，其中提到了尼尔森经典十大原则来进行可用性评估。&lt;/p&gt;
&lt;h4 id=&quot;十大基本原则&quot;&gt;&lt;a href=&quot;#十大基本原则&quot; class=&quot;headerlink&quot; title=&quot;十大基本原则&quot;&gt;&lt;/a&gt;十大基本原则&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;系统状
      
    
    </summary>
    
    
      <category term="产品设计" scheme="zhaolong.online/tags/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>网络编程学习总结</title>
    <link href="zhaolong.online/2019/04/04/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>zhaolong.online/2019/04/04/网络编程学习总结/</id>
    <published>2019-04-04T14:42:38.000Z</published>
    <updated>2019-04-04T14:42:38.295Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法结构刷题：数组与链表（python）</title>
    <link href="zhaolong.online/2019/04/04/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%EF%BC%9A%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8/"/>
    <id>zhaolong.online/2019/04/04/算法结构刷题：数组与链表/</id>
    <published>2019-04-04T13:46:23.000Z</published>
    <updated>2019-04-15T14:29:45.795Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-编号206-Reverse-Linked-List"><a href="#1-编号206-Reverse-Linked-List" class="headerlink" title="1. 编号206 - Reverse Linked List"></a>1. 编号206 - Reverse Linked List</h4><pre><code>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;nullOutput: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;null</code></pre><p>答案：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">      cur,prev = head, <span class="literal">None</span>;</span><br><span class="line">      <span class="keyword">while</span> cur:</span><br><span class="line">          cur.next,prev,cur = prev,cur,cur.next</span><br><span class="line">      <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-编号206-Reverse-Linked-List&quot;&gt;&lt;a href=&quot;#1-编号206-Reverse-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;1. 编号206 - Reverse Linked List&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="zhaolong.online/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>错题整理</title>
    <link href="zhaolong.online/2019/04/04/%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>zhaolong.online/2019/04/04/错题整理/</id>
    <published>2019-04-04T01:21:08.000Z</published>
    <updated>2019-04-04T01:21:08.619Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS面试题5</title>
    <link href="zhaolong.online/2019/04/02/JS%E9%9D%A2%E8%AF%95%E9%A2%985/"/>
    <id>zhaolong.online/2019/04/02/JS面试题5/</id>
    <published>2019-04-02T12:04:09.000Z</published>
    <updated>2019-04-03T14:23:16.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="考点7-浏览器页面加载、性能优化和安全性"><a href="#考点7-浏览器页面加载、性能优化和安全性" class="headerlink" title="考点7:浏览器页面加载、性能优化和安全性"></a>考点7:浏览器页面加载、性能优化和安全性</h4><h5 id="1-从输入url到得到html的详细过程："><a href="#1-从输入url到得到html的详细过程：" class="headerlink" title="1. 从输入url到得到html的详细过程："></a>1. 从输入url到得到html的详细过程：</h5><p>答案：<br>（简洁版）</p><ol><li>浏览器根据DNS服务器得到域名的IP地址；（应用层：DNS解析）</li><li>向这个IP的机器发送http请求；（应用层：生成HTTP请求报文；传输层：TCP三次握手）</li><li>服务器收到、处理并返回http请求；（网络层：使用IP协议选择路线；数据链路层：将数据包packet封装为帧（加帧头帧尾）；物理层：将帧转化为电子、光学或微波信号传输数据）</li><li>浏览器得到返回内容；（这里接收数据也经历了物理层、数据链路层、网络层、传输层和应用层的解封和解包。）</li><li>浏览器进行资源加载（loader模块有两条资源加载路径：1.主资源，index.html；2.派生资源，即index.html文件中所用到的资源； parser模块先解析主资源内容，生成派生资源对应的DOM结构，然后根据需求触发派生资源的加载流程，比如遇到image的起始标签，会创建相应的image元素HTMLImageElement，接着依据img标签的内容设置HTMLImageElement的属性。在设置src属性时，会触发图片资源加载，发起加载资源的请求。【此处常见优化点是：对派生资源使用缓存】经过parser模块的处理，浏览器把页面文本转换成了一颗节点带CSS Style、会响应自定义事件的Styled DOM树；接着是DOM树 ——&gt; Render树(用来表示文档的可视信息) –&gt;Render Layer树 ; HTML采用流式布局模型，按照从左到右、从上至下的顺序来遍历页面元素，然后依照一定的顺序绘制页面。）</li></ol><p>（具体请参考 [小火柴的博客][url]:<a href="https://www.cnblogs.com/xiaohuochai/p/9193083.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaohuochai/p/9193083.html</a>, 非常详细。）</p><h5 id="2-window-onload-和-DOMContentLoaded的区别？"><a href="#2-window-onload-和-DOMContentLoaded的区别？" class="headerlink" title="2. window.onload 和 DOMContentLoaded的区别？"></a>2. window.onload 和 DOMContentLoaded的区别？</h5><p>答案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 等同于window.onload,要等页面的全部资源加载完才会执行，包括图片、视频等；</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//DOM渲染完即可执行，无需等图片和视频全部加载完。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>jQuery和其他框架通常都采用后者；</p><h5 id="3-页面加载的优化？"><a href="#3-页面加载的优化？" class="headerlink" title="3. 页面加载的优化？"></a>3. 页面加载的优化？</h5><p>答案：</p><ol><li><p>加载资源的优化：<br>a. 静态资源的压缩合并（比如js文件打包压缩；<br>b. 静态资源的缓存；(JS文件缓存在本地，发新版时才需要重新获取)<br>c. 使用CDN让资源加载更快；<br>d. 使用SSR后端渲染，数据直接输出到HTML中；</p></li><li><p>渲染优化：<br>a. CSS放在head中，JS放在body最下方；<br>b. 懒加载（图片懒加载、下拉加载更多）；<br>c. 减少DOM查询，对DOM查询做缓存；<br>d. 减少DOM操作，多个操作尽量合并在一起执行；<br>e. 事件节流；<br>f. 尽早执行操作（如DOMContentLoaded）</p></li><li><p>具体示例：</p><ol><li><p>懒加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">'img1'</span> src = <span class="string">'preview.png'</span> data-realsrc = <span class="string">'abc.png'</span>/&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">'img1'</span>);</span><br><span class="line">    img1.src = img1.getAttribute(<span class="string">'data-realsrc'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>合并DOM插入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listNode = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要插入10个li标签</span></span><br><span class="line"><span class="comment">//用createDocumentFragment方法,在插入10个标签的过程中不会改变dom树。</span></span><br><span class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">var</span> x,li;</span><br><span class="line"><span class="keyword">for</span> (x=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">  li = <span class="built_in">document</span>.creatElement(<span class="string">'li'</span>);</span><br><span class="line">  li.innerHTML = <span class="string">'List item'</span> + i;</span><br><span class="line">  frag.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listNode.appendChild(frag)</span><br></pre></td></tr></table></figure></li><li><p>事件节流</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textarea = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>);</span><br><span class="line"><span class="keyword">var</span> timeoutId;</span><br><span class="line">textarea.addEventListener(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(timeoutId)&#123;</span><br><span class="line">    clearTimeout(timeoutId)</span><br><span class="line">  &#125;</span><br><span class="line">  timeoutId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//触发change事件</span></span><br><span class="line">  &#125;,<span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码描述的是用户输入时的一种情况，如果用户打字很快的话，我们就不需要让频繁输入的内容持续触发一次次函数，此处我们设定了500ms，也就是用户100ms未进行输入的情况下我们就对keyup事件进行响应。</p></li><li><p>缓存dom查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pList = <span class="built_in">document</span>.getElementByTagName(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; pList.length;i++)&#123;</span><br><span class="line">  <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们把获取到的p元素都放在pList这个数组中，避免了后期遍历时再频繁地去进行DOM查询。</p></li></ol></li></ol><h5 id="3-安全性。"><a href="#3-安全性。" class="headerlink" title="3. 安全性。"></a>3. 安全性。</h5><ol><li><p>XSS 举例：在新浪博客中写一篇文章，偷偷插入一段script攻击代码，获取访问该文章的读者的cookie信息发送到自己的服务器；</p><p> 解决办法：1.前端替换关键字，例如替换&lt;为&amp;lt；&gt;为&amp;gt。（不推荐）</p><pre><code>2.后端解决（依靠服务器）</code></pre><p>2.XSRF 举例：你已登陆一个购物网站，正在浏览商品，该网站付费接口是XXX.com/pay?id=100但是没任何验证，然后你收到一封邮件，隐藏着&lt;img src=xxx.com/pay?id=100&gt;，查看邮件的时候，就已经悄悄的付费购买了（现在来看，这个例子没有现实意义。）<br> 解决办法：增加购买验证流程，如输入指纹、密码、短信验证码等。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;考点7-浏览器页面加载、性能优化和安全性&quot;&gt;&lt;a href=&quot;#考点7-浏览器页面加载、性能优化和安全性&quot; class=&quot;headerlink&quot; title=&quot;考点7:浏览器页面加载、性能优化和安全性&quot;&gt;&lt;/a&gt;考点7:浏览器页面加载、性能优化和安全性&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>css清除浮动的终极奥义</title>
    <link href="zhaolong.online/2019/04/02/css%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E7%BB%88%E6%9E%81%E5%A5%A5%E4%B9%89/"/>
    <id>zhaolong.online/2019/04/02/css清除浮动的终极奥义/</id>
    <published>2019-04-02T03:28:35.000Z</published>
    <updated>2019-04-02T08:45:05.221Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h4><h5 id="1-BFC（Block-Formating-Context-块格式化上下文）"><a href="#1-BFC（Block-Formating-Context-块格式化上下文）" class="headerlink" title="1.BFC（Block Formating Context,块格式化上下文）"></a>1.BFC（Block Formating Context,块格式化上下文）</h5><h6 id="触发BFC的条件："><a href="#触发BFC的条件：" class="headerlink" title="触发BFC的条件："></a>触发BFC的条件：</h6><ol><li>float除了none以外的值；</li><li>overflow除了visible以外的值；</li><li>display（table-cell,table-caption,inline-block）</li><li>postion(absolute,fixed);</li><li>fieldset元素</li></ol><h6 id="需要注意的点是：display-table-本身并不会创建BFC，但是它会产生匿名框（块级元素A包含其他块级元素a1时，若此时在a1前插入文本，就会形成块级匿名框，匿名框不可见，且不能设置样式，匿名框只是用来维护dom树结构的），而匿名框中的display-table-cell可以创建新的BFC，换句话说，触发块级格式化上下文的是匿名框，而不是display-table，所以display-table-和-display-table-cell创建的BFC效果是不一样的。"><a href="#需要注意的点是：display-table-本身并不会创建BFC，但是它会产生匿名框（块级元素A包含其他块级元素a1时，若此时在a1前插入文本，就会形成块级匿名框，匿名框不可见，且不能设置样式，匿名框只是用来维护dom树结构的），而匿名框中的display-table-cell可以创建新的BFC，换句话说，触发块级格式化上下文的是匿名框，而不是display-table，所以display-table-和-display-table-cell创建的BFC效果是不一样的。" class="headerlink" title="需要注意的点是：display:table 本身并不会创建BFC，但是它会产生匿名框（块级元素A包含其他块级元素a1时，若此时在a1前插入文本，就会形成块级匿名框，匿名框不可见，且不能设置样式，匿名框只是用来维护dom树结构的），而匿名框中的display:table-cell可以创建新的BFC，换句话说，触发块级格式化上下文的是匿名框，而不是display:table，所以display:table 和 display:table-cell创建的BFC效果是不一样的。"></a>需要注意的点是：display:table 本身并不会创建BFC，但是它会产生匿名框（块级元素A包含其他块级元素a1时，若此时在a1前插入文本，就会形成块级匿名框，匿名框不可见，且不能设置样式，匿名框只是用来维护dom树结构的），而匿名框中的display:table-cell可以创建新的BFC，换句话说，触发块级格式化上下文的是匿名框，而不是display:table，所以display:table 和 display:table-cell创建的BFC效果是不一样的。</h6><h6 id="BFC的特性"><a href="#BFC的特性" class="headerlink" title="BFC的特性"></a>BFC的特性</h6><ol><li>BFC会阻止外边距叠加：<br>当两个相邻的块元素在同一个BFC中时，它们之间垂直方向的外边距会发生叠加。</li><li>BFC不会重叠浮动元素：<br>根据规定，一个BFC的边框不能和它里面的元素的外边距，这就意味着浏览器将会给BFC创建隐式的外边距来阻止它和浮动元素的外边距叠加。因此，想给一个挨着浮动的BFC添加负的外边距将 <strong>不会起作用</strong>。</li><li>BFC通常可以包含浮动。</li></ol><h5 id="2-清除浮动与闭合浮动的区别"><a href="#2-清除浮动与闭合浮动的区别" class="headerlink" title="2.清除浮动与闭合浮动的区别"></a>2.清除浮动与闭合浮动的区别</h5><h6 id="清除浮动：对应的css属性是clear-left-right-both-none"><a href="#清除浮动：对应的css属性是clear-left-right-both-none" class="headerlink" title="清除浮动：对应的css属性是clear:left|right|both|none;"></a>清除浮动：对应的css属性是clear:left|right|both|none;</h6><h6 id="闭合浮动：使浮动元素闭合从而减少浮动带来的影响，一般来说目的是为了解决父元素高度塌陷的问题。"><a href="#闭合浮动：使浮动元素闭合从而减少浮动带来的影响，一般来说目的是为了解决父元素高度塌陷的问题。" class="headerlink" title="闭合浮动：使浮动元素闭合从而减少浮动带来的影响，一般来说目的是为了解决父元素高度塌陷的问题。"></a>闭合浮动：使浮动元素闭合从而减少浮动带来的影响，一般来说目的是为了解决父元素高度塌陷的问题。</h6><h4 id="2-具体实现（只提供两个优秀方案，都与伪元素-after相关）"><a href="#2-具体实现（只提供两个优秀方案，都与伪元素-after相关）" class="headerlink" title="2.具体实现（只提供两个优秀方案，都与伪元素:after相关）"></a>2.具体实现（只提供两个优秀方案，都与伪元素:after相关）</h4><ol><li>：after伪元素闭合浮动<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">'.'</span>;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>:hidden;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*兼容ie*/</span></span><br><span class="line">.clearfix&#123;*zoom:1;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>display:block 使生成的元素以块级元素显示，占满剩余空间<br>height:0 避免生成内容破坏原有布局的高度；<br>visibility:hidden 使生成的内容不可见，并允许可能被生成元素盖住的内容可以进行点击和交互；<br>content：’.’ 可以是其他内容，但最好是有内容，因为到firefox7.0版本为止若内容为空，火狐浏览器仍然会产生额外的空隙。</p><p>2.同时操作:before和:after<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;*zoom:1&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法不存在上面提到的火狐浏览器空隙的问题，而且:before的加入是用来处理margin边距重叠问题的：我们上面提到过，内部元素float会创建BFC，div1和div2的外边距叠加问题，如果你想解决这个问题，可以加入:before，否则只需要after就够了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-基础知识&quot;&gt;&lt;a href=&quot;#1-基础知识&quot; class=&quot;headerlink&quot; title=&quot;1.基础知识&quot;&gt;&lt;/a&gt;1.基础知识&lt;/h4&gt;&lt;h5 id=&quot;1-BFC（Block-Formating-Context-块格式化上下文）&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="CSS" scheme="zhaolong.online/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS面试题4</title>
    <link href="zhaolong.online/2019/04/01/JS%E9%9D%A2%E8%AF%95%E9%A2%984/"/>
    <id>zhaolong.online/2019/04/01/JS面试题4/</id>
    <published>2019-04-01T08:51:17.000Z</published>
    <updated>2019-04-02T01:54:55.522Z</updated>
    
    <content type="html"><![CDATA[<p>####考点4:异步和单线程</p><p>#####1. 同步和异步的区别是什么？分别举一个同步和异步的例子。<br>答案：1. 同步会阻塞代码运行，而异步不会；2.alert是同步，setTimeout是异步；</p><p>#####2. 前端使用异步的场景有哪些？<br>答案：1. 事件绑定；2.网络请求：ajax 以及动态图片加载；3.定时任务：setTimeout，setInterval</p><p>####考点5:JS Web API</p><p>#####1.常用的JS（浏览器执行的JS）包括哪几个部分？<br>答案：1. JS基础知识（ECMA262标准）；2. JS Web API（W3C标准）</p><p>#####2. DOM是哪种基本的数据结构？（document object model 文档对象模型）<br>答案： 树；</p><p>#####3. DOM操作的常用API有哪些？<br>答案：1. 获取DOM节点，以及节点的property和attribute；</p><pre><code>2. 获取父节点，获取子节点；3. 新增节点，删除节点removeChild；</code></pre><p>#####4. DOM节点的attr和property有何区别？<br>答案：修改property是对一个js对象的属性的修改，而修改attribute是对html标签属性的修改。</p><p>#####补充知识点：</p><ol><li>appendChild 除了可以增加新的子节点以外，还可以移动已有的节点，insertBefore也是这样的。</li><li><p>BOM：Browser Object Model浏览器对象模型（很少会问），了解:</p><p> 1）navigator.userAgent可以获取浏览器的类型 &amp;screen.width/height获取显示屏幕的尺寸；</p><p> 2）拆解url的各个部分：scheme://host:port/path?query#fragment:</p><p>（1）.scheme:通信协议，常用的http,ftp,maito等。</p><p>（2）.host:主机，服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。</p><p>（3）.port:端口号，整数，可选，省略时使用方案的默认端口，如http的默认端口为80。</p><p>（4）.path:路径，由零或多个”/“符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</p><p>（5）.query:查询，可选，用于给动态网页（如使用CGI、ISAPI、PHP/JSP/ASP/ASP.NET等技术制作的网页）传递参数，可有多个参数，用”\&amp;”符号隔开，每个参数的名和值用”=”符号隔开。</p><p>（6）.fragment:信息片断，字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。(也称为锚点)</p><p>(该部分参考了:<br> [url]：<a href="https://blog.csdn.net/singlepepper/article/details/50981743" target="_blank" rel="noopener">https://blog.csdn.net/singlepepper/article/details/50981743</a><br>)</p></li></ol><h4 id="考点6-事件及事件绑定"><a href="#考点6-事件及事件绑定" class="headerlink" title="考点6:事件及事件绑定"></a>考点6:事件及事件绑定</h4><h5 id="1-编写一个通用的事件监听函数"><a href="#1-编写一个通用的事件监听函数" class="headerlink" title="1. 编写一个通用的事件监听函数"></a>1. 编写一个通用的事件监听函数</h5><p>答案：</p><ol><li><p>平时的事件监听函数是怎样的：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">type,fun</span>)</span>&#123;<span class="comment">//传入事件类型和函数</span></span><br><span class="line"></span><br><span class="line">  div1.addEventListener(type,fun)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'hello!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>加入代理的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">elem,type,selector,fn</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fn == <span class="literal">null</span>)&#123;</span><br><span class="line">    fn = selector;</span><br><span class="line">    selector = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  elem.addEventListener(type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(selector)&#123;</span><br><span class="line">      <span class="comment">//代理</span></span><br><span class="line">        <span class="keyword">var</span> target;</span><br><span class="line">        <span class="keyword">if</span>（target.matches(selector))&#123;</span><br><span class="line">          target = e.target;</span><br><span class="line">          fn.call(target,e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//不是代理</span></span><br><span class="line">      fn(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-简述事件冒泡的事件："><a href="#2-简述事件冒泡的事件：" class="headerlink" title="2. 简述事件冒泡的事件："></a>2. 简述事件冒泡的事件：</h5><p>答案：</p><ol><li>DOM树形结构；</li><li>事件冒泡；</li><li>阻止冒泡// e.preventDefault();</li><li>冒泡的应用</li></ol><p>#####3. 给无限下拉加载图片的页面绑定事件<br>答案：</p><ol><li>使用代理；</li><li>简述代理的两个优点：1. 代码简洁，方便； 2. 给浏览器压力比较小。</li></ol><h5 id="4-手写Ajax，不依赖第三方库"><a href="#4-手写Ajax，不依赖第三方库" class="headerlink" title="4. 手写Ajax，不依赖第三方库"></a>4. 手写Ajax，不依赖第三方库</h5><h6 id="1-简单版"><a href="#1-简单版" class="headerlink" title="1. 简单版"></a>1. 简单版</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr  = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>,url,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//第三个参数决定是同步还是异步，true为异步，false为同步，true是在等待服务器响应时执行其他脚本，当响应就绪后对响应进行处理；而false是等待服务器响应再执行；</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> || xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-完整版"><a href="#2-完整版" class="headerlink" title="2. 完整版"></a>2. 完整版</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Ajax&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>: function(url,fn)&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>,url,<span class="literal">true</span>);<span class="comment">//实际应用下必须使用异步，否则会阻塞网站其他脚本运行</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//onreadystatechange是存有处理服务器响应的函数，每当readyState改变时，这个函数就会被执行</span></span><br><span class="line">      <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span> || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">        <span class="comment">//状态码一般只需要知道4是请求完成并且响应已就绪即可</span></span><br><span class="line">        fn.call(<span class="keyword">this</span>,xhr.responseText);<span class="comment">//responseText是字符串形式的相应数据。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send();<span class="comment">//将请求发至服务器</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//以上为get方法</span></span><br><span class="line"></span><br><span class="line">  post:<span class="function"><span class="keyword">function</span>(<span class="params">url,data,fn</span>)</span>&#123;<span class="comment">//data应为'a=a1&amp;b=b1'这种字符串格式，在jq里如果data为对象会自动将对象转为这种字符串格式</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//添加http头，发送信息至服务器时内容编码类型</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">        fn.call(<span class="keyword">this</span>,xhr.responseText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    xhr.send(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get和post方法的区别：</p><ol><li>GET更简单更快，大部分情况下都可以使用；</li><li><p>以下情况下需要使用POST：</p><p> 1） 更新服务器上的文件或数据库；<br> 2） 向服务器发送大量数据（POST没有数据量限制）；<br> 3） 发送包含未知字符的用户输入；</p></li><li><p>POST传数据时，需要setRequestHeader方法来添加HTTP头；而GET发送信息时，直接加参数到url上就可以，比如:url?a=a1&amp;b=b1</p></li></ol><h5 id="5-Ajax跨域"><a href="#5-Ajax跨域" class="headerlink" title="5. Ajax跨域"></a>5. Ajax跨域</h5><h6 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1. 什么是跨域"></a>1. 什么是跨域</h6><p>答案：</p><ol><li>原因：浏览器有同源策略，不允许ajax访问其他域接口；</li><li>条件：协议、域名、端口，有一个不同就算跨域；</li><li><p>可以跨域加载资源的三个标签：</p><p>1）img(如果进行了防盗链处理，也无法跨域)：用于打点统计，统计网站可以是其他域；<br>2）link，script可以使用CDN；<br>3) script可以用于JSONP；</p></li></ol><h6 id="2-JSONP"><a href="#2-JSONP" class="headerlink" title="2. JSONP"></a>2. JSONP</h6><p>答案：</p><ol><li>JSONP原理：script标签src属性中的链接可以访问跨域的js脚本，利用这特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域；</li><li>JSPONP基本实现：Web客户端通过与调用脚本相同的方式来调用跨域服务器上动态生成的js格式文件（一般以json为后缀）；客户端调用json文件成功以后就可以自由处理数据了。</li><li>与ajax异同：调用方式类似，都是向特定的url发送请求，然后将服务器返回的数据进行处理，因此jquery等都把JSONP当作ajax的一种方式进行了封装；但ajax的核心是通过XMLHttpRequest获取非本页的内容，而jsonp的核心则是动态添加。</li><li>代码演示（只有客户端，仅供参考）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/得到个人信息查询结果后的回调函数</span></span><br><span class="line"><span class="regexp">    var profileHandler = function(data)&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      alert('姓名是'+data.name+','+'年龄是'+'data.age')</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/提供jsonp服务的URL地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）；</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/aspx性质就是服务器端运行的动态网页文件</span></span><br><span class="line"><span class="regexp">    var url = 'https:/</span><span class="regexp">/gettoknowanyone.com/</span>jsonp/profileResult.aspx?id=<span class="number">33567</span>&amp;callback=profileHandler<span class="string">';</span></span><br><span class="line"><span class="string">    //创建script标签，设置其属性</span></span><br><span class="line"><span class="string">    var script = document.createElement('</span>script<span class="string">');</span></span><br><span class="line"><span class="string">    script.setAttribute('</span>src<span class="string">',url);</span></span><br><span class="line"><span class="string">    //把script标签加入head，此时调用开始</span></span><br><span class="line"><span class="string">    document.getElementsByTagname('</span>head<span class="string">')[0].appendChild(script);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>服务端的实现基本原理是一样的，只是用的语言可能不一样，最后返回的数据，上面profileResult.aspx会生成好代码提供给客户端，格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">profileHandler(&#123;</span><br><span class="line">  <span class="string">'id'</span>:<span class="number">33567</span>,</span><br><span class="line">  <span class="string">'name'</span>:<span class="string">'zhangsan'</span>,</span><br><span class="line">  <span class="string">'age'</span>:<span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h6 id="3-服务器端设置-http-header来解决跨域问题（了解即可）"><a href="#3-服务器端设置-http-header来解决跨域问题（了解即可）" class="headerlink" title="3. 服务器端设置 http header来解决跨域问题（了解即可）"></a>3. 服务器端设置 http header来解决跨域问题（了解即可）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个参数设置允许跨域的域名称，不建议直接写‘*’</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">'http://a.com,http://b.com'</span>);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>,<span class="string">'X-Requested-With'</span>);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">'PUT,POST,GET,DELETE,OPTIONS'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收跨域的cookie:</span></span><br><span class="line">resonse.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">'true'</span>);</span><br></pre></td></tr></table></figure><h5 id="6-本地存储方式"><a href="#6-本地存储方式" class="headerlink" title="6. 本地存储方式"></a>6. 本地存储方式</h5><p>答案：</p><ol><li>老方法： cookie(本身用于客户端和服务器端通信，但有本地存储的功能)；<br>缺点： 存储量太小，只有4KB;所有http请求都带着，会影响获取资源的效率；</li><li>新方法： SessionStorage，LocalStorage（HTML5专门为存储而设计，最大容量为5M；API简单易用（两者相同）；localStorage.setItem(key,value);localStorage.getItem(key)）；</li><li><strong>区别</strong>： L是一直存储在本地，而S是关掉浏览器就没了；</li><li>注意：ios sarafi隐藏模式下如果调用L和S的API会报错，所以建议用try-catch。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####考点4:异步和单线程&lt;/p&gt;
&lt;p&gt;#####1. 同步和异步的区别是什么？分别举一个同步和异步的例子。&lt;br&gt;答案：1. 同步会阻塞代码运行，而异步不会；2.alert是同步，setTimeout是异步；&lt;/p&gt;
&lt;p&gt;#####2. 前端使用异步的场景有哪些？&lt;
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JS面试题3</title>
    <link href="zhaolong.online/2019/04/01/JS%E9%9D%A2%E8%AF%95%E9%A2%983/"/>
    <id>zhaolong.online/2019/04/01/JS面试题3/</id>
    <published>2019-04-01T06:35:41.000Z</published>
    <updated>2019-04-01T08:49:18.676Z</updated>
    
    <content type="html"><![CDATA[<p>####考点3:作用域和闭包</p><p>#####1.对变量提升的理解：哪些会被提升？<br>答案：</p><ol><li>变量定义（上下文）；</li><li>函数声明；</li></ol><p>#####小知识点：</p><p>######1. 函数声明和函数表达式的区别：<br>1.函数声明(如下，可以正常执行)<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name,age);</span><br><span class="line">  <span class="keyword">var</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  2.函数表达式(如下，会报错)<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  age=<span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name,age);</span><br><span class="line">  <span class="keyword">var</span> age;</span><br><span class="line">  <span class="comment">//Uncaugt TypeError: fn is not a function at &lt;anonymous&gt;:1:1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  ######2. this：常见的场景说明<br>    <strong>this要在执行时（）才能确认值，定义时无法确认</strong></p><ol><li><p>作为构造函数执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作为对象属性执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name:<span class="string">'A'</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.fn() <span class="comment">// this === a，所以打印结果为: A</span></span><br></pre></td></tr></table></figure></li><li><p>作为普通函数执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()<span class="comment">//this === window</span></span><br></pre></td></tr></table></figure></li><li><p>call apply bind;</p><p>1）call apply （两者非常相近）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">x</span>:<span class="number">100</span>&#125;,<span class="string">'zhangsan'</span>,<span class="number">20</span>)<span class="comment">//此时的this就是&#123;x:100&#125;</span></span><br></pre></td></tr></table></figure><p>2）bind (bind只能以函数表达式的形式执行，否则报错)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;.bind(&#123;<span class="attr">y</span>:<span class="number">2</span>&#125;)</span><br><span class="line">fn2(<span class="string">'zhangsan'</span>,<span class="number">22</span>);</span><br><span class="line"><span class="comment">//此时的this为&#123;y:2&#125;</span></span><br></pre></td></tr></table></figure><p>######3. 作用域的概念</p></li><li><p>作用域定义：规定一条数据可以在哪个范围内使用。通常来说，一段程序代码所用到的数据并不总是有效/可用的，而限定这个数据可用性的代码范围就是这个数据的作用域；</p></li><li><p>作用域的好处：作用域的使用提高了程序逻辑的局部性，增加程序的可靠性，减少名字冲突；</p></li><li><p>JS中变量的作用域： 块级作用域（ES6新增let命令来进行变量声明，使用let命令声明的变量只在let命令所在代码块内有效），函数作用域，全局作用域（在任何地方都能访问：1. 函数外定义的变量；2. 在函数中不使用var定义的变量；3. 所有window对象上的属性）；</p><p>JS中自由变量的定义：当前作用域没有定义的变量；</p><p>我们通过下面的例子来理解js中作用域的问题</p><p>1）ES5中没有块级作用域导致的问题：循环变量泄漏为全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">      arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrObj = <span class="keyword">new</span> test();</span><br><span class="line"><span class="built_in">console</span>.log(arrObj[<span class="number">0</span>]());<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p><em>arrObj[0]访问的是test函数作用域下的变量i，test中i只用来控制循环，循环结束后泄漏成了test函数的变量。</em><br>2）ES5中模拟块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrObj = <span class="keyword">new</span> test();</span><br><span class="line"><span class="built_in">console</span>.log(arrObj[<span class="number">0</span>]())<span class="comment">//0;</span></span><br></pre></td></tr></table></figure><p>3) 运用上述知识的面试题： 创建10个<a>标签，点击的时候弹出对应的序号<br> 解题思路：创建10个自执行函数，这样才能保证不会像 1）一样被覆盖掉。</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">      a.innerHTMl = i+ <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">      a.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();<span class="comment">//取消点击超链接跳转的默认行为；</span></span><br><span class="line">        alert(i);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 利用let块级作用域会更简单！</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">      a.innerHTML = i+ <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">      a.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();<span class="comment">//取消点击超链接跳转的默认行为；</span></span><br><span class="line">        alert(i);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>######4.作用域链及自由变量的查找规则：</p></li><li><p>当我们调用一条数据的时候，js首先会在当前作用域中进行查找，如果找不到，就向上找到父级的作用域，如果在父级的作用域中也找不到，就继续向上查找，直到window的作用域，如果在window中也找不到，就会报错。</p></li><li><p>寻找父级作用域要关注函数声明定义的位置，而不是调用的位置；</p><p>#####2. 闭包的应用场景：</p></li><li><p>函数作为返回值；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">//返回一个函数，函数作为返回值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = F1();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">f1();<span class="comment">//100</span></span><br></pre></td></tr></table></figure></li><li><p>函数作为参数传递；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = F1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a= <span class="number">200</span>;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line">F2(f1);<span class="comment">//仍然是100;</span></span><br></pre></td></tr></table></figure></li><li><p>实际开发中闭包的应用（封装变量，收敛权限）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFirstLoad</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _list = [];<span class="comment">//私有变量</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_list.indexOf(id)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      _list.push(id);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> firstLoad = isFirstLoad();</span><br><span class="line">firstLoad(<span class="number">10</span>);<span class="comment">//第一次返回true,同时10被加入到数组当中</span></span><br><span class="line">firstLoad(<span class="number">10</span>);<span class="comment">//第二次返回false.</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####考点3:作用域和闭包&lt;/p&gt;
&lt;p&gt;#####1.对变量提升的理解：哪些会被提升？&lt;br&gt;答案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量定义（上下文）；&lt;/li&gt;
&lt;li&gt;函数声明；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#####小知识点：&lt;/p&gt;
&lt;p&gt;######1. 函数声
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JS基础知识复习</title>
    <link href="zhaolong.online/2019/03/31/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/"/>
    <id>zhaolong.online/2019/03/31/JS基础知识复习/</id>
    <published>2019-03-31T07:55:34.000Z</published>
    <updated>2019-03-31T14:17:42.717Z</updated>
    
    <content type="html"><![CDATA[<p>#####箭头函数不具备this，arguments，自己家没有就找上一级的this<br>this的指向问题：谁调用函数，this就是谁。<br>如何更改：<br>1）call apply bind<br>2) var that = this;<br>3) =&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> b+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转化为箭头函数:<br><code>let a = b =&gt; b+1;</code><br>//去掉function关键字</p><p>练习转换:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b+c</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>答案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">b</span> =&gt;</span> c =&gt; b+c;</span><br><span class="line"><span class="comment">//高阶函数（&gt;= 2个箭头的）</span></span><br></pre></td></tr></table></figure></p><p>闭包：函数执行的一瞬间叫闭包，（不销毁的作用域），当执行后返回的结果必须是引用数据类型，被外界变量接收，此时这个函数不会被销毁（用途：模块化）；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#####箭头函数不具备this，arguments，自己家没有就找上一级的this&lt;br&gt;this的指向问题：谁调用函数，this就是谁。&lt;br&gt;如何更改：&lt;br&gt;1）call apply bind&lt;br&gt;2) var that = this;&lt;br&gt;3) =&amp;gt;&lt;/
      
    
    </summary>
    
    
      <category term="JS基础" scheme="zhaolong.online/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法概括</title>
    <link href="zhaolong.online/2019/03/31/markdown%E8%AF%AD%E6%B3%95%E6%A6%82%E6%8B%AC/"/>
    <id>zhaolong.online/2019/03/31/markdown语法概括/</id>
    <published>2019-03-31T07:16:34.000Z</published>
    <updated>2019-03-31T08:07:25.327Z</updated>
    
    <content type="html"><![CDATA[<p>##markdown 常用语法概括</p><p>###1. 标题</p><p>####所用符号：’#’, # -&gt; ###### 共六级，任君自选；</p><p>###2. 引用</p><p>####所用符号：’#’, &gt; -&gt;  &gt;&gt;&gt;&gt;&gt;</p><p>###3. 强调</p><p>####所用符号：’*’ or ‘_’, 任选其一！</p><p>####基本用法： 1个*或_表斜体，2个表加粗，3个表斜体+加粗,可与删除效果叠加</p><p>####删除文本：<del>文本中线</del> ，用’~~’符号</p><p>###4. 列表</p><p>####（1）无序列表</p><p>####所用符号： ‘-‘ or ‘*’ or ‘+’，任选其一！</p><p>####基本语法：</p><pre><code>- 海鲜  - 海鲈鱼    - 鱼头</code></pre><p>####（2) 有序列表</p><p>####所用符号: 数字+英文句点符号</p><p>####基本用法:</p><ol><li>北京</li><li>上海</li><li>深圳</li><li>杭州</li></ol><p>###5. 分割线</p><p>####所用符号: 3个及以上的’*’ or ‘-‘ or ‘_’</p><p>###6. 代码</p><p>####所用符号: 2个（开头+结尾各一）` 用来包裹添加行内代码的区域 | 6个（开头+结尾各三） `用来包裹添加多行代码</p><p>###注意事项: <strong>开头的符号后面要加上编程语言的名字,如javascript</strong></p><p>###7. 链接</p><p>####(1) 行内式链接</p><p>####基本用法:<br>      [baidu](<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a>)</p><p>####(2) 参考式链接</p><p>####基本用法:<br>            [baidu][url]<br>            [url:]<a href="https://baidu.com/" target="_blank" rel="noopener">https://baidu.com/</a></p><p>####（3）自动链接</p><p>###基本用法: <a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></p><p>###8. 图片</p><p>####(1) 行内式插入图片</p><p>####基本用法：![图片描述](http://链接)</p><p>####(2) 参考式插入图片</p><p>####基本用法：![图片描述][image]<br>            [image]:http://链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##markdown 常用语法概括&lt;/p&gt;
&lt;p&gt;###1. 标题&lt;/p&gt;
&lt;p&gt;####所用符号：’#’, # -&amp;gt; ###### 共六级，任君自选；&lt;/p&gt;
&lt;p&gt;###2. 引用&lt;/p&gt;
&lt;p&gt;####所用符号：’#’, &amp;gt; -&amp;gt;  &amp;gt;&amp;gt;
      
    
    </summary>
    
    
      <category term="markdown" scheme="zhaolong.online/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="zhaolong.online/2019/03/31/JS%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
    <id>zhaolong.online/2019/03/31/JS面试题2/</id>
    <published>2019-03-30T16:09:00.000Z</published>
    <updated>2019-03-31T07:50:57.434Z</updated>
    
    <content type="html"><![CDATA[<p>####1. 如何准确判断一个变量是否为数组类型?</p><p>  答案：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>####2. 写一个原型链继承的例子?</p><p>  答案：封装DOM查询：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义构造函数Elem，属性封装成id</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.elem = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  Elem.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(val)&#123;<span class="comment">//如果传了val参数的话执行：</span></span><br><span class="line"></span><br><span class="line">      elem.innerHTML = val;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">//以便实现后来的链式操作</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> elem.innerHTML <span class="comment">//如果没有传，就返回这个elem原来的innerHTML属性值。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Elem.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听事件，type为事件类型，fn为回调函数</span></span><br><span class="line">    elem.addEventListener(type,fn)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem(<span class="string">'div1'</span>);</span><br><span class="line"></span><br><span class="line">  div1.html(<span class="string">'&lt;p&gt;hello&lt;/p&gt;'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'clicked'</span>)&#125;).html(<span class="string">'&lt;p&gt;javascript&lt;/p&gt;'</span>)</span><br></pre></td></tr></table></figure><p>####3. 描述new一个对象的过程：</p><p>  答案：创建一个新对象，this指向这个新对象，执行代码对this赋值，返回this；</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.class = <span class="string">'class-1'</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">//这行不用写，默认就有；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(‘zhangsan’,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></code></pre><p>####4. zepto(或其他框架)源码中如何使用原型链？</p><p>  答案： (还没看，只能先补充一些基础的知识点)</p><ol><li>所有的引用类型（数组，对象，函数）都具有对象特性，即可自由扩展属性（除了null）；</li><li>所有的引用类型都有一个<strong>proto</strong>属性（隐式原型属性），属性值是一个普通的对象；</li><li>所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象；</li><li>所有的引用类型，<strong>proto</strong> 属性值（隐式原型属性指向构造它的构造函数的prototype属性值），当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么就会去它的<strong>proto</strong>（即它的构造函数的prototype（显式原型）中寻找.</li><li>通过对象的属性的形式来执行函数的时候，无论这函数式自身的属性还是从原型中得到的属性，this永远指向f本身，没有指向函数，故执行f.alertName()时，alert(this.name)中的this就是f。</li><li>循环对象自身的属性时，可以通过hasOwnProperty 来验证遍历中的item是否为f自身的属性，例如下： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item</span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> f)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (f.hasOwnProperty(item))&#123; <span class="built_in">console</span>.log(item)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高级浏览器已经在for in中屏蔽了来自原型的属性，但我们还是建议加上这个判断，来保证程序的健壮性。</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>####5. instanceof 用来判断引用类型属于哪个构造函数的方法？</p><p>  答案：给出例子：</p><pre><code>`var f = new Foo(‘zhangsan’)`此时，f instanceof Foo 的判断逻辑就是；f 是Foo new出来的一个类型，判断方式其实是：f的隐式原型（.__proto__）一层一层往上，看能否对应到Foo.prototype(显式原型)注意：Object.prototype的隐式原型是null（JS为了避免死循环）</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####1. 如何准确判断一个变量是否为数组类型?&lt;/p&gt;
&lt;p&gt;  答案：&lt;br&gt;  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>变量类型和计算</title>
    <link href="zhaolong.online/2019/03/30/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>zhaolong.online/2019/03/30/JS面试题/</id>
    <published>2019-03-30T15:43:08.000Z</published>
    <updated>2019-04-13T04:01:07.344Z</updated>
    
    <content type="html"><![CDATA[<p>###考点一: 变量类型和计算</p><p>####1. JS使用typeof能得到哪些类型？</p><p>  答案：(均为字符串格式)undefined, string, number, boolean, object, function,symbol(ES6),bigint(null返回的是 object)</p><p>####2. 何时使用===何时使用==:</p><p>  答案：建议都使用 ===，考虑到以下因素：1.一致性；2.简单和性能：===是最简单的操作符，因为它不用进行类型转换，而==会进行强制类型转换。而可以使用 == 的两种场景：</p><p>  #####1.判断对象的属性是否存在:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> object = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(obj.a == <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里相当于 obj.a == null || obj.a == undefined 的简写形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  #####2.判断函数的参数是否存在：</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b==<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里相当于b == null || b == undefined 的简写形式</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre><p>#####扩展知识：</p><ol><li>if语句会执行强制类型转换;</li><li>if()返回false的情况：0, null, undefined,NaN,空字符串，false；其他均返回true,空对象和空数组，也是返回true的;</li><li>你知道console.log(1===1===1)的值是什么吗？ false. 理由：1===1 为true， 而true===1不成立，所以返回为false.</li></ol><h4 id="3-JS中有哪些内置函数"><a href="#3-JS中有哪些内置函数" class="headerlink" title="3. JS中有哪些内置函数?"></a>3. JS中有哪些内置函数?</h4><p>  答案：Number, String,Object，Boolean，Function，Array，Date，RegExp，Error，Symbol（ES6)<br>    【注：Symbol函数前不能使用new命令，否则会报错，Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述】;</p><h4 id="4-JS变量按照存储方式区分为哪些类型，并描述其特点？"><a href="#4-JS变量按照存储方式区分为哪些类型，并描述其特点？" class="headerlink" title="4. JS变量按照存储方式区分为哪些类型，并描述其特点？"></a>4. JS变量按照存储方式区分为哪些类型，并描述其特点？</h4><p>  答案：1.️ 值类型，值类型存储的是值；<br>  2.️ 引用类型 ，存储的是地址，赋值之后是把原变量的引用地址赋值给新变量。</p><h4 id="5-如何理解JSON？"><a href="#5-如何理解JSON？" class="headerlink" title="5.如何理解JSON？"></a>5.如何理解JSON？</h4><p>  答案：JSON就是一个js对象，有两个方法:</p><pre><code>1. JSON.stringify({‘a’:10,’b’:20})2. JSON.parse（’{‘a’:10,’b’:20}’),JSON.parse 不兼容，可以使用eval来转化。</code></pre><ol start="6"><li><p>new一个对象会发生什么？</p><p>答案： 1. 构造一个新对象；</p><pre><code>2. 将构造函数的作用域赋给新对象（this）；3. 执行构造函数中的代码（为新对象添加属性）；4. 返回该对象。</code></pre><p>用原生JS实现new:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//返回一个函数</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;<span class="string">'__proto__'</span>:f.prototype&#125;;</span><br><span class="line">    f.apply(o,<span class="built_in">arguments</span>);<span class="comment">//继承父类的属性</span></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个栗子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//new一个Person的实例p1</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>,<span class="number">18</span>);</span><br><span class="line"><span class="comment">//此时p1包含name，age属性，同时p1的__proto__指向Person的prototype</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###考点一: 变量类型和计算&lt;/p&gt;
&lt;p&gt;####1. JS使用typeof能得到哪些类型？&lt;/p&gt;
&lt;p&gt;  答案：(均为字符串格式)undefined, string, number, boolean, object, function,symbol(ES6),bi
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="zhaolong.online/2019/03/30/hello-world/"/>
    <id>zhaolong.online/2019/03/30/hello-world/</id>
    <published>2019-03-30T10:22:29.898Z</published>
    <updated>2019-03-30T10:22:29.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
