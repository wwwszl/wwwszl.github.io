<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵龙的个人博客</title>
  
  <subtitle>Learn something of everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhaolong.online/"/>
  <updated>2019-03-31T07:46:17.571Z</updated>
  <id>zhaolong.online/</id>
  
  <author>
    <name>ZHAO LONG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown语法概括</title>
    <link href="zhaolong.online/2019/03/31/markdown%E8%AF%AD%E6%B3%95%E6%A6%82%E6%8B%AC/"/>
    <id>zhaolong.online/2019/03/31/markdown语法概括/</id>
    <published>2019-03-31T07:16:34.000Z</published>
    <updated>2019-03-31T07:46:17.571Z</updated>
    
    <content type="html"><![CDATA[<p>##markdown 常用语法概括</p><p>###1. 标题</p><p>####所用符号：’#’, # -&gt; ###### 共六级，任君自选；</p><p>###2. 引用</p><p>####所用符号：’#’, &gt; -&gt;  &gt;&gt;&gt;&gt;&gt;</p><p>###3. 强调</p><p>####所用符号：’*’ or ‘_’, 任选其一！</p><p>####基本用法： 1个*或_表斜体，2个表加粗，3个表斜体+加粗,可与删除效果叠加</p><p>####删除文本：<del>文本中线</del> ，用’~~’符号</p><p>###4. 列表</p><p>####（1）无序列表</p><p>####所用符号： ‘-‘ or ‘*’ or ‘+’，任选其一！</p><p>####基本语法：</p><pre><code>- 海鲜  - 海鲈鱼    - 鱼头</code></pre><p>####（2) 有序列表</p><p>####所用符号: 数字+英文句点符号</p><p>####基本用法:</p><ol><li>北京</li><li>上海</li><li>深圳</li><li>杭州</li></ol><p>###5. 分割线</p><p>####所用符号: 3个及以上的’*’ or ‘-‘ or ‘_’</p><p>###6. 代码</p><p>####所用符号: ` 用来包裹添加行内代码的区域 | `<code></code>用来包裹添加多行代码</p><p>###注意事项: <strong>开头的符号后面要加上编程语言的名字,如javascript</strong></p><p>###7. 链接</p><p>####(1) 行内式链接</p><p>####基本用法:<br>      [baidu](<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a>)</p><p>####(2) 参考式链接</p><p>####基本用法:<br>            [baidu][url]<br>            [url:]<a href="https://baidu.com/" target="_blank" rel="noopener">https://baidu.com/</a></p><p>####（3）自动链接</p><p>###基本用法: <a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></p><p>###8. 图片</p><p>####(1) 行内式插入图片</p><p>####基本用法：![图片描述](http://链接)</p><p>####(2) 参考式插入图片</p><p>####基本用法：![图片描述][image]<br>            [image]:http://链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##markdown 常用语法概括&lt;/p&gt;
&lt;p&gt;###1. 标题&lt;/p&gt;
&lt;p&gt;####所用符号：’#’, # -&amp;gt; ###### 共六级，任君自选；&lt;/p&gt;
&lt;p&gt;###2. 引用&lt;/p&gt;
&lt;p&gt;####所用符号：’#’, &amp;gt; -&amp;gt;  &amp;gt;&amp;gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="zhaolong.online/2019/03/31/JS%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
    <id>zhaolong.online/2019/03/31/JS面试题2/</id>
    <published>2019-03-30T16:09:00.000Z</published>
    <updated>2019-03-31T07:50:57.434Z</updated>
    
    <content type="html"><![CDATA[<p>####1. 如何准确判断一个变量是否为数组类型?</p><p>  答案：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>####2. 写一个原型链继承的例子?</p><p>  答案：封装DOM查询：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义构造函数Elem，属性封装成id</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.elem = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  Elem.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(val)&#123;<span class="comment">//如果传了val参数的话执行：</span></span><br><span class="line"></span><br><span class="line">      elem.innerHTML = val;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">//以便实现后来的链式操作</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> elem.innerHTML <span class="comment">//如果没有传，就返回这个elem原来的innerHTML属性值。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Elem.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听事件，type为事件类型，fn为回调函数</span></span><br><span class="line">    elem.addEventListener(type,fn)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem(<span class="string">'div1'</span>);</span><br><span class="line"></span><br><span class="line">  div1.html(<span class="string">'&lt;p&gt;hello&lt;/p&gt;'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'clicked'</span>)&#125;).html(<span class="string">'&lt;p&gt;javascript&lt;/p&gt;'</span>)</span><br></pre></td></tr></table></figure><p>####3. 描述new一个对象的过程：</p><p>  答案：创建一个新对象，this指向这个新对象，执行代码对this赋值，返回this；</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.class = <span class="string">'class-1'</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">//这行不用写，默认就有；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(‘zhangsan’,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></code></pre><p>####4. zepto(或其他框架)源码中如何使用原型链？</p><p>  答案： (还没看，只能先补充一些基础的知识点)</p><ol><li>所有的引用类型（数组，对象，函数）都具有对象特性，即可自由扩展属性（除了null）；</li><li>所有的引用类型都有一个<strong>proto</strong>属性（隐式原型属性），属性值是一个普通的对象；</li><li>所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象；</li><li>所有的引用类型，<strong>proto</strong> 属性值（隐式原型属性指向构造它的构造函数的prototype属性值），当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么就会去它的<strong>proto</strong>（即它的构造函数的prototype（显式原型）中寻找.</li><li>通过对象的属性的形式来执行函数的时候，无论这函数式自身的属性还是从原型中得到的属性，this永远指向f本身，没有指向函数，故执行f.alertName()时，alert(this.name)中的this就是f。</li><li>循环对象自身的属性时，可以通过hasOwnProperty 来验证遍历中的item是否为f自身的属性，例如下： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item</span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> f)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (f.hasOwnProperty(item))&#123; <span class="built_in">console</span>.log(item)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高级浏览器已经在for in中屏蔽了来自原型的属性，但我们还是建议加上这个判断，来保证程序的健壮性。</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>####5. instanceof 用来判断引用类型属于哪个构造函数的方法？</p><p>  答案：给出例子：</p><pre><code>`var f = new Foo(‘zhangsan’)`此时，f instanceof Foo 的判断逻辑就是；f 是Foo new出来的一个类型，判断方式其实是：f的隐式原型（.__proto__）一层一层往上，看能否对应到Foo.prototype(显式原型)注意：Object.prototype的隐式原型是null（JS为了避免死循环）</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####1. 如何准确判断一个变量是否为数组类型?&lt;/p&gt;
&lt;p&gt;  答案：&lt;br&gt;  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>变量类型和计算</title>
    <link href="zhaolong.online/2019/03/30/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>zhaolong.online/2019/03/30/JS面试题/</id>
    <published>2019-03-30T15:43:08.000Z</published>
    <updated>2019-03-31T07:44:19.610Z</updated>
    
    <content type="html"><![CDATA[<p>###考点一: 变量类型和计算</p><p>####1. JS使用typeof能得到哪些类型？</p><p>  答案：undefined, string, number, boolean, object, function(null返回的是 object)，symbol(ES6)</p><p>####2. 何时使用===何时使用==:</p><p>  答案：建议都使用 ===，考虑到以下因素：1.一致性；2.简单和性能：===是最简单的操作符，因为它不用进行类型转换，而==会进行强制类型转换。而可以使用 == 的两种场景：</p><p>  #####1.判断对象的属性是否存在:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> object = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(obj.a == <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里相当于 obj.a == null || obj.a == undefined 的简写形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  #####2.判断函数的参数是否存在：</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b==<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里相当于b == null || b == undefined 的简写形式</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre><p>#####扩展知识：</p><ol><li>if语句会执行强制类型转换;</li><li>if()返回false的情况：0, null, undefined,NaN,空字符串，false；其他均返回true,空对象和空数组，也是返回true的;</li><li>你知道console.log(1===1===1)的值是什么吗？ false. 理由：1===1 为true， 而true===1不成立，所以返回为false.</li></ol><p>####3. JS中有哪些内置函数?</p><p>  答案：Number, String,Object，Boolean，Function，Array，Date，RegExp，Error，Symbol（ES6)<br>    【注：Symbol函数前不能使用new命令，否则会报错，Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述】;</p><p>####4. JS变量按照存储方式区分为哪些类型，并描述其特点？</p><p>  答案：1.️ 值类型，值类型存储的是值；<br>  2.️ 引用类型 ，存储的是地址，赋值之后是把原变量的引用地址赋值给新变量。</p><p>5.如何理解JSON？</p><p>  答案：JSON就是一个js对象，有两个方法:</p><pre><code>1. JSON.stringify({‘a’:10,’b’:20})2. JSON.parse（’{‘a’:10,’b’:20}’),JSON.parse 不兼容，可以使用eval来转化。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###考点一: 变量类型和计算&lt;/p&gt;
&lt;p&gt;####1. JS使用typeof能得到哪些类型？&lt;/p&gt;
&lt;p&gt;  答案：undefined, string, number, boolean, object, function(null返回的是 object)，symbol
      
    
    </summary>
    
    
      <category term="JS面试题" scheme="zhaolong.online/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="zhaolong.online/2019/03/30/hello-world/"/>
    <id>zhaolong.online/2019/03/30/hello-world/</id>
    <published>2019-03-30T10:22:29.898Z</published>
    <updated>2019-03-30T10:22:29.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
